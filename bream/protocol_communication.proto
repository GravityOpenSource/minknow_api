syntax="proto3";

package ont.bream.protocol_communication;

// KEYSTORE KEY: bream.protocol_communication

// This is hopefully the one place on how bream/ui communicate together
// Mux scans etc will hopefully migrate to this

message ProtocolDataResults {
  // A mapping of run ID to data about the running protocol
  map<string, ProtocolData> data = 1;
}

message ProtocolData {

  message MinMax {
    double min = 1;
    double max = 2;
  }

  // Min/Max bases per second recommended
  MinMax translocation_speed = 1;

  // Min/Max recommended Q-Score
  MinMax q_score = 2;

  // Temperature with tolerance
  MinMax temperature = 3;

  // Any bias offsets applied by bream. So the UI can alter the
  // bias_voltages coming back from MinKNOW
  int32 bias_voltage_offset = 4;


  // Reserved values: 2, 4
  enum ProtocolInternalState {
    RUNNING_MUX_SCAN = 0;
    RUNNING_SEQUENCING = 1;
    PAUSED = 3;
    PAUSING = 5;
    RESUMING = 6;
    PREPARING_FOR_MUX_SCAN = 7;
  }

  // State of the experiment
  ProtocolInternalState state = 5;

  message MuxScan {}
  message Pause {}
  message Resume {}

  // UI will send MUX_SCAN and bream will set ProtocolInternalState to PREPARING_FOR_MUX_SCAN => RUNNING_MUX_SCAN
  // UI will send PAUSE and bream will set ProtocolInternalState to PAUSING => PAUSED
  // UI will send RESUME and bream will set ProtocolInternalState to RESUMING => RUNNING_SEQUENCING
  // UI will ideally not ask to pause during a mux scan as it won't be actioned immediately
  oneof protocol_event_trigger {
    MuxScan mux_scan = 6;
    Pause pause = 7;
    Resume resume = 8;
  };
}
