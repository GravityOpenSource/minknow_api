syntax = "proto3";

package minknow.daemon;

////////////////////////////////////////
// Global enumerations
////////////////////////////////////////

// the type of available software update
enum UpdateType {
    // Means a new version of MinKNOW is available
    SOFTWARE = 0;
    // Means a new version of only the protocols scripts is available
    PROTOCOLS = 1;
}

// The type of device this installation of MinKNOW knows about
enum DeviceType {
    UNKNOWN = 0;
    MINION = 1;
    PROMETHION = 2;
    GRIDION = 3;
    PROMETHIONBETA = 4;
}

// The type of device this installation of MinKNOW knows about
enum HostType {
    HOST_TYPE_PC = 0;
    HOST_TYPE_PROMETHION_ALPHA = 1;
    HOST_TYPE_GRIDION = 2;
    HOST_TYPE_PROMETHION_BETA = 3;
    HOST_TYPE_MINIT = 4;
}

////////////////////////////////////////
// Messages
////////////////////////////////////////

message InstanceInfo {
    reserved 3, 4, 6;
    reserved "event_sampler_port";
    reserved "raw_data_sampler_port";

    int32 port = 1;
    int32 long_poll_port = 2;
    int32 grpc_port = 5;
    int32 grpc_web_port = 7;
    int32 grpc_web_insecure_port = 8;
}

message Error {
    enum Code {
        // No error occurred
        DAEMON_SUCCESS = 0;
        // Generic Error, use when the error can't be described below
        DAEMON_UNKNOWN = 1;
        // An error which can occur decoding request message. It could be
        // a web socket error or an error deserializing the message
        DAEMON_COMMUNICATION = 2;
        // Occur when the message is inconsistent or semantically wrong. For example message id is != 0, command is start
        // but the corresponding list of minions to start is empty.
        DAEMON_INCONSISTENT = 3;
        // Occur when the command execution fails, for example if MinKNOW can't be
        // started or stopped
        DAEMON_SYSTEM = 4;
    }

    Code code = 1;
    string message = 2;
}

message Status {
    // MinIONs are represented by their unique id
    // note: this should be rebranded as devices, but would break compatibility
    repeated string inactive_minions = 1;
    map<string, InstanceInfo> running_minions = 2;
}

message StartStopCmdParams {
    // the minions id to start or stop
    // note: this should be rebranded as device_ids, but would break compatibility
    repeated string minions_id = 1;
}

message RunSoftwareUpdateParams {
    UpdateType update_type = 1;
}

message DebugInfoDump {
    // path of archive file which contains various debug info. Can be requested from client or prvoided on crashed
    string debug_archive_path = 1;
}

message MinknowCrashedNotifOutput {
    // the minion id managed by the instance of MinKNOW that crashed
    // note: this should be rebranded as device_id, but would break compatibility
    string minion_id = 1;
    // the path of the core dump. To be shown to the user only if not empty.
    string core_dump_path = 2;
    // the path of the configuration directory used by MinKNOW. To be shown to the user only if not empty.
    string config_path = 3;
    DebugInfoDump info_dump = 4;
}

message SoftwareUpdateNotifOutput {    
    UpdateType update_type = 1;
    // the version of the package that is going to be installed
    string version = 5;
    // the working directory of the installer to run
    string installer_working_dir = 2;
    // the installer command
    string installer_command = 3;
    // the list of the installer arguments
    repeated string installer_args = 4;

    // The current version of the minknow distribution. This is the same information
    // as in the InstanceService get_version_info response
    string current_version = 14;

    enum DistributionStatus {
        UNKNOWN  = 0; // The distribution status is unknown or can not be determined
        STABLE   = 1; // Released software in that same configuration in which
                      // it was distributed.
        UNSTABLE = 2; // Pre-release or release-candidate software that has not
                      // been fully tested, but has not been modified from how it
                      // was distributed.
        MODIFIED = 3; // Some or all components have been replaced after distribution
    }
    // Indicates if the MinKNOW distribution including components such as Bream
    // are stable, unstable or have been modified.
    DistributionStatus distribution_status = 15;
}

// Replicates JSON-RPC
// This is the whole message which is exchanged between the server and the client
message DaemonMessage {
    // A command sent from MKW to the daemon
    enum Command {
        // returns the list of all inactive and running minions. Does not require parameters
        LIST  = 0;
        // starts instances of MinKNOW providing the MinION id it has to manage. Requires start_stop_cmd_params
        // is initialized with the MinIONs to manage
        START = 1;
        // stops instances of MinKNOW associated with a particular MinION id. Requires start_stop_cmd_params
        // is initialized with the MinIONs to manage
        STOP  = 2;
        // the daemon will run the software update it has already available 
        RUN_SOFTWARE_UPDATE = 4;
        // Daemon generates an archive of debug data for developers / help desk
        REQUEST_DEBUG_INFO = 5;
        // terminates the daemon. Does not require parameters
        EXIT  = 3;
    }
    
    // A notification sent by the daemon to MKW
    enum Notification {
        // the status changed, for example another instance of MKW started a new instance of MinKNOW.
        // Will not provide parameters. The output is the updated status
        STATUS_CHANGED = 0;
        // some MunKNOW process crashed. The output in contained in minknow_crashed_notif_output
        MINKNOW_CRASHED = 1;
        // a software update is available. The output in contained in software_update_notif_output
        SOFTWARE_UPDATE_AVAILABLE = 2;
        // Process mk_manager_svc is shutting down
        MK_MANAGER_SHUT_DOWN = 3;        
    }
    
    // Allow clients to match responses to requests
    // The special value id = 0 means the daemon is notifying MKW. Otherwise 
    int32 id = 1; 

    // COMMAND / RESPONSE
    Command command = 2;

    // command specific parameters
    
    StartStopCmdParams start_stop_cmd_params = 3;
    RunSoftwareUpdateParams run_sw_update_params = 9;
    
    // NOTIFICATION
    Notification notification = 4;
        
    // notification specific parameters

    MinknowCrashedNotifOutput minknow_crashed_notif_output = 5;

    // Lists software updates available for the client to install.  This consists of Protocol or 
    // MinKNOW installers.  There are rare occasions where both are available.  The implementation
    // should install the SOFTWARE first and recheck updates.
    repeated SoftwareUpdateNotifOutput software_update_notif_output = 6;    
        
    // the updated status of inactive/running MinIONs after a command is executed or a status changed notification is sent.
    Status status = 7;

    // the current version of minknow. This is assigned for every response or notification
    string minknow_version = 11;

    // The type of device this installation of MinKNOW knows about.
    //
    // This is sent with every response or notification.
    DeviceType device_type = 12;

    // The type of host this manager is running on.
    //
    // Unlike device_type, this reflects the host hardware the machine runs on,
    // so should indicate the external look of the host, not the device
    // which happens to be connected.
    //
    // This is sent with every response or notification.
    HostType host_type = 13;

    // The error occurred when the server tried to perform client request
    Error error = 8;
    
    // Info dump of debug files 
    DebugInfoDump debug_info_dump = 10;
}
